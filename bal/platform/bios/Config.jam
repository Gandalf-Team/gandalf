GdIncludeDir $(GD_TOP) include platform bios ;

SUPPORTED_ARCHITECTURES =
    ia32
    amd64
    ;

rule GdBalBinaries {
    local bits = 32 ;
    if $(ARCH) = amd64 {
        bits = 64 ;
    }

    local name = gd_bal.$(bits) ;

    local script = [ FDirName $(GD_TOP) bal platform bios bal$(bits).ld ] ;

    LinkWithScript $(name).elf : $(GD_BAL_OBJECTS) : $(script) ;
    LinkLibraries  $(name).elf : lib9660.a $(PDCLIB) libgdioctl.a $(LIBGCC) ;
    ObjCopy $(name) : $(name).elf : -O binary ;
    Depends exe : $(name) ;
}

# BiosStage1 output : name ;
rule BiosStage1 {
    # Specific sources
    local specific_srcs =  [ GLOB [ FDirName $(GD_TOP) bal platform bios stage1 $(2) ] : *.S ] ;

    local def = BD_$(2:U) ;

    # General objects
    local objs = ;
    for src in [ FGristFiles $(STAGE1_SRCS) ] {
        local obj = $(src:D=$(2):S=$(SUFOBJ)) ;
        Object $(obj) : $(src) ;
        MakeLocate $(obj) : $(LOCATE_TARGET) ;
        objs += $(obj) ;
    }

    # Specific objects
    for src in [ FGristFiles $(specific_srcs) ] {
        local obj = $(src:D=$(2):S=$(SUFOBJ)) ;
        Object $(obj) : $(src) ;
        MakeLocate $(obj) : $(LOCATE_TARGET) ;
        objs += $(obj) ;
    }

    ObjectDefines $(objs) : $(def) ;
    LinkWithScript $(<).elf : $(objs) : [ FDirName $(GD_TOP) bal platform bios stage1 $(2) link.ld ] ;
    ObjCopy $(<) : $(<).elf : -O binary ;
    DEPENDS exe : $(<) ;
}
